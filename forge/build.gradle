buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven { url 'https://jitpack.io' }
}


minecraft {
    mappings channel: 'official', version: "${rootProject.minecraft_version}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')


            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${rootProject.mod_name}.mixins.json"
            arg "-mixin.config=${rootProject.mod_name}.forge.mixins.json"

        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${rootProject.mod_name}.mixins.json"
            arg "-mixin.config=${rootProject.mod_name}.forge.mixins.json"
        }
    }
}

mixin {
    add sourceSets.main, "${rootProject.mod_name}.refmap.json"
    add sourceSets.main, "${rootProject.mod_name}.forge.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    minecraft "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly project(":common")
}

processResources {
    from project(":common").sourceSets.main.resources

    // fixme doesn't work yet
    inputs.property "version", rootProject.version

    filesMatching("mods.toml") {
        expand "version": rootProject.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : rootProject.mod_name,
                "Specification-Vendor"    : "",
                "Specification-Version"   : rootProject.mod_version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "",
                "MixinConfigs"            : "${rootProject.mod_name}.mixins.json, ${rootProject.mod_name}.forge.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
